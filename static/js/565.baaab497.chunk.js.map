{"version":3,"file":"static/js/565.baaab497.chunk.js","mappings":"8SAEaA,EAAgBC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oIAQzBC,EAAiBH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oKAM1BG,EAAQL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+HAMlBK,EAAYP,EAAAA,GAAAA,GAASQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,kDAKrBO,EAAYT,EAAAA,GAAAA,EAAQU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,kE,SC4CjC,EA1Da,WACX,IACMS,GADSC,EAAAA,EAAAA,MAAPC,GAERC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAwBtB,OApBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACJ,OAAnBd,GAAa,GAAMY,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEEC,EAAAA,EAAAA,IAAe3B,GAAS,KAAD,EAApCuB,EAAIC,EAAAI,KACVC,QAAQC,IAAIP,GACZf,EAASe,EAAKQ,MACdf,EAAS,IACTJ,GAAa,GAAOY,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAEpBR,EAASQ,EAAAQ,GAAMC,SAASV,MACxBX,GAAa,GAAO,QAEA,OAFAY,EAAAC,KAAA,GAEpBb,GAAa,GAAOY,EAAAU,OAAA,6BAAAV,EAAAW,OAAA,GAAAb,EAAA,yBAEvB,kBAdqB,OAAAH,EAAAiB,MAAA,KAAAC,UAAA,KAgBtBnB,GACF,GAAG,CAAClB,KAGFsC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAc,IACd9B,IAAa6B,EAAAA,EAAAA,KAACE,EAAAA,EAAM,IACpB3B,GAAS4B,EAAAA,GAAAA,MAAY5B,IACtByB,EAAAA,EAAAA,KAACpD,EAAa,CAAAmD,SACXhC,EAAMqC,KACL,SAAAb,GAAI,OACFA,EAAKc,eACHP,EAAAA,EAAAA,MAAC9C,EAAc,CAAA+C,SAAA,EACbC,EAAAA,EAAAA,KAAC9C,EAAK,CACJoD,IACEf,EAAKc,aAAY,mCAAAE,OACsBhB,EAAKc,cAnC5D,8EAsCcG,MAAO,IACPC,IAAKlB,EAAKmB,QAGZV,EAAAA,EAAAA,KAAC5C,EAAS,CAAA2C,SAAER,EAAKmB,QACjBZ,EAAAA,EAAAA,MAACxC,EAAS,CAAAyC,SAAA,CAAC,cAAYR,EAAKoB,eAZTpB,EAAK7B,GAc3B,QAKb,C","sources":["pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContainerList = styled.ul`\n  display: grid;\n  gap: 20px;\n  padding: 20px;\n  grid-template-columns: repeat(4, auto);\n  grid-template-rows: auto;\n`;\n\nexport const ImageListItems = styled.li`\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 260px;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\nexport const NamaStyle = styled.h3`\n  padding-left: 16px;\n  color: black;\n`;\n\nexport const TextStyle = styled.p`\n  padding: 16px;\n  font-weight: 500;\n  color: black;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchApCredits } from 'api/fetchApi';\nimport Loader from 'components/Loader/Loader';\nimport { ToastContainer, toast } from 'react-toastify';\nimport {\n  ContainerList,\n  Image,\n  ImageListItems,\n  NamaStyle,\n  TextStyle,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const movieId = id;\n  const [casts, setCasts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const defaultImg =\n    'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\n  useEffect(() => {\n    const searchMoviesCast = async () => {\n      setIsLoading(true);\n      try {\n        const data = await fetchApCredits(movieId);\n        console.log(data);\n        setCasts(data.cast);\n        setError('');\n        setIsLoading(false);\n      } catch (error) {\n        setError(error.response.data);\n        setIsLoading(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    searchMoviesCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <ToastContainer />\n      {isLoading && <Loader />}\n      {error && toast.error(error)}\n      <ContainerList>\n        {casts.map(\n          cast =>\n            cast.profile_path && (\n              <ImageListItems key={cast.id}>\n                <Image\n                  src={\n                    cast.profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${cast.profile_path}`\n                      : defaultImg\n                  }\n                  width={250}\n                  alt={cast.name}\n                />\n\n                <NamaStyle>{cast.name}</NamaStyle>\n                <TextStyle>Character: {cast.character}</TextStyle>\n              </ImageListItems>\n            )\n        )}\n      </ContainerList>\n    </div>\n  );\n};\nexport default Cast;\n"],"names":["ContainerList","styled","_templateObject","_taggedTemplateLiteral","ImageListItems","_templateObject2","Image","_templateObject3","NamaStyle","_templateObject4","TextStyle","_templateObject5","movieId","useParams","id","_useState","useState","_useState2","_slicedToArray","casts","setCasts","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","searchMoviesCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchApCredits","sent","console","log","cast","t0","response","finish","stop","apply","arguments","_jsxs","children","_jsx","ToastContainer","Loader","toast","map","profile_path","src","concat","width","alt","name","character"],"sourceRoot":""}